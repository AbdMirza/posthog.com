{
    "id": "posthog-js",
    "hogRef": "0.1",
    "info": {
        "version": "1.248.1",
        "id": "posthog-js",
        "title": "PostHog JavaScript Web SDK",
        "description": "Posthog-js allows you to automatically capture usage and send events to PostHog.",
        "slugPrefix": "posthog-js",
        "specUrl": "https://github.com/PostHog/posthog-js"
    },
    "classes": [
        {
            "description": "This is the SDK reference for the PostHog JavaScript Web SDK. You can learn more about example usage in the [JavaScript Web SDK documentation](/docs/libraries/js). You can also follow [framework specific guides](/docs/frameworks) to integrate PostHog into your project.\nThis SDK is designed for browser environments. Use the PostHog [Node.js SDK](/docs/libraries/node) for server-side usage.",
            "id": "PostHog",
            "title": "PostHog",
            "functions": [
                {
                    "category": "",
                    "description": "Create an alias, which PostHog will use to link two distinct_ids going forward (not retroactively).",
                    "details": "Multiple aliases can map to the same original ID, but not vice-versa. Aliases can also be chained. If the original ID is not passed in, we will use the current distinct_id.\nThe best practice is to call `alias()` when a unique user is created (e.g. at registration), and before any `identify()` calls for that user.\nIn PostHog, aliases are different from distinct_ids. The following will **not** work:\nInstead, do this:",
                    "id": "alias",
                    "showDocs": true,
                    "title": "alias",
                    "examples": [
                        {
                            "id": "",
                            "name": "",
                            "code": "\nposthog.alias('new_id', 'original_id');\n\n\n"
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "A unique identifier that you want to use for this user in the future.",
                            "isOptional": false,
                            "type": "string",
                            "name": "alias"
                        },
                        {
                            "description": "The current identifier being used for this user. Defaults to the current distinct_id.",
                            "isOptional": true,
                            "type": "string",
                            "name": "original"
                        }
                    ],
                    "returnType": {
                        "id": "CaptureResult | void | number",
                        "name": "CaptureResult | void | number"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Calculates event properties before sending to PostHog.",
                    "details": "This method is used internally and can also be used by integrations (e.g. Segment) to enrich events with PostHog properties before sending them to Segment, which is required for some PostHog products to work correctly (e.g. to have a correct $session_id property).",
                    "id": "calculateEventProperties",
                    "showDocs": true,
                    "title": "calculateEventProperties",
                    "examples": [
                        {
                            "id": "calculate_event_properties_for_a_custom_event",
                            "name": "Calculate event properties for a custom event",
                            "code": "\n// Calculate event properties for a custom event\nconst properties = posthog.calculateEventProperties('custom_event', { event: 'prop' }, new Date(), 'uuid123');\n\n\n"
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "The name of the event, e.g. 'Button Click', 'Sign Up', '$pageview'.",
                            "isOptional": false,
                            "type": "string",
                            "name": "eventName"
                        },
                        {
                            "description": "The properties to include with the event.",
                            "isOptional": false,
                            "type": "Properties",
                            "name": "eventProperties"
                        },
                        {
                            "description": "The timestamp of the event. Defaults to the current time.",
                            "isOptional": true,
                            "type": "Date",
                            "name": "timestamp"
                        },
                        {
                            "description": "The UUID of the event.",
                            "isOptional": true,
                            "type": "string",
                            "name": "uuid"
                        },
                        {
                            "description": "If true, the event won't be sent and internal state won't be updated.",
                            "isOptional": true,
                            "type": "boolean",
                            "name": "readOnly"
                        }
                    ],
                    "returnType": {
                        "id": "Properties",
                        "name": "Properties"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Checks the feature flags associated with this Survey to see if the survey can be rendered.\nThis method is deprecated because it's synchronous and won't return the correct result if surveys are not loaded.",
                    "details": null,
                    "id": "canRenderSurvey",
                    "showDocs": true,
                    "title": "canRenderSurvey",
                    "examples": [
                        {
                            "id": "canrendersurvey",
                            "name": "Generated example for canRenderSurvey",
                            "code": "\n// Generated example for canRenderSurvey\nposthog.canRenderSurvey();\n    "
                        }
                    ],
                    "releaseTag": "deprecated",
                    "params": [
                        {
                            "description": "The ID of the survey to check.",
                            "isOptional": false,
                            "type": "string",
                            "name": "surveyId"
                        }
                    ],
                    "returnType": {
                        "id": "SurveyRenderReason | null",
                        "name": "SurveyRenderReason | null"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Checks the feature flags associated with this Survey to see if the survey can be rendered.",
                    "details": null,
                    "id": "canRenderSurveyAsync",
                    "showDocs": true,
                    "title": "canRenderSurveyAsync",
                    "examples": [
                        {
                            "id": "canrendersurveyasync",
                            "name": "Generated example for canRenderSurveyAsync",
                            "code": "\n// Generated example for canRenderSurveyAsync\nposthog.canRenderSurveyAsync();\n    "
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "The ID of the survey to check.",
                            "isOptional": false,
                            "type": "string",
                            "name": "surveyId"
                        },
                        {
                            "description": "If true, the survey will be reloaded from the server, Default: false",
                            "isOptional": true,
                            "type": "boolean",
                            "name": "forceReload"
                        }
                    ],
                    "returnType": {
                        "id": "Promise<SurveyRenderReason>",
                        "name": "Promise<SurveyRenderReason>"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Capture an event. This is the most important and frequently used PostHog function.",
                    "details": "By default, PostHog automatically captures pageviews and pageleaves as well as clicks, change of inputs, and form submissions associated with `a`, `button`, `form`, `input`, `select`, `textarea`, and `label` tags.\nWe recommend using a `[object] [verb]` format for your event names, where `[object]` is the entity that the behavior relates to, and `[verb]` is the behavior itself. For example, `project created`, `user signed up`, or `invite sent`.",
                    "id": "capture",
                    "showDocs": true,
                    "title": "capture",
                    "examples": [
                        {
                            "id": "capture_a_user_registration_event_with_properties",
                            "name": "Capture a user registration event with properties",
                            "code": "\n// Capture a user registration event with properties\nposthog.capture('user_signed_up', {'referral_code': '123456', 'login_type': 'email', 'trial': true});\n\n"
                        },
                        {
                            "id": "capture_a_pageview_event",
                            "name": "Capture a pageview event",
                            "code": "\n// Capture a pageview event\nposthog.capture('$pageview');\n\n\n"
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "The name of the event. This can be anything the user does - 'Button Click', 'Sign Up', 'Item Purchased', etc.",
                            "isOptional": false,
                            "type": "EventName",
                            "name": "event_name"
                        },
                        {
                            "description": "A set of properties to include with the event you're sending. These describe the user who did the event or details about the event itself.",
                            "isOptional": true,
                            "type": "Properties | null",
                            "name": "properties"
                        },
                        {
                            "description": "No description available",
                            "isOptional": true,
                            "type": "CaptureOptions",
                            "name": "options"
                        }
                    ],
                    "returnType": {
                        "id": "CaptureResult | undefined",
                        "name": "CaptureResult | undefined"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Capture a caught exception manually",
                    "details": null,
                    "id": "captureException",
                    "showDocs": true,
                    "title": "captureException",
                    "examples": [
                        {
                            "id": "captureexception",
                            "name": "Generated example for captureException",
                            "code": "\n// Generated example for captureException\nposthog.captureException();\n    "
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "No description available",
                            "isOptional": false,
                            "type": "unknown",
                            "name": "error"
                        },
                        {
                            "description": "No description available",
                            "isOptional": true,
                            "type": "Properties",
                            "name": "additionalProperties"
                        }
                    ],
                    "returnType": {
                        "id": "void",
                        "name": "void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Capture written user feedback for a LLM trace. Numeric values are converted to strings.",
                    "details": null,
                    "id": "captureTraceFeedback",
                    "showDocs": true,
                    "title": "captureTraceFeedback",
                    "examples": [
                        {
                            "id": "capturetracefeedback",
                            "name": "Generated example for captureTraceFeedback",
                            "code": "\n// Generated example for captureTraceFeedback\nposthog.captureTraceFeedback();\n    "
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "The trace ID to capture feedback for.",
                            "isOptional": false,
                            "type": "string | number",
                            "name": "traceId"
                        },
                        {
                            "description": "The feedback to capture.",
                            "isOptional": false,
                            "type": "string",
                            "name": "userFeedback"
                        }
                    ],
                    "returnType": {
                        "id": "void",
                        "name": "void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Capture a metric for a LLM trace. Numeric values are converted to strings.",
                    "details": null,
                    "id": "captureTraceMetric",
                    "showDocs": true,
                    "title": "captureTraceMetric",
                    "examples": [
                        {
                            "id": "capturetracemetric",
                            "name": "Generated example for captureTraceMetric",
                            "code": "\n// Generated example for captureTraceMetric\nposthog.captureTraceMetric();\n    "
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "The trace ID to capture the metric for.",
                            "isOptional": false,
                            "type": "string | number",
                            "name": "traceId"
                        },
                        {
                            "description": "The name of the metric to capture.",
                            "isOptional": false,
                            "type": "string",
                            "name": "metricName"
                        },
                        {
                            "description": "The value of the metric to capture.",
                            "isOptional": false,
                            "type": "string | number | boolean",
                            "name": "metricValue"
                        }
                    ],
                    "returnType": {
                        "id": "void",
                        "name": "void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Clear the user's opt in/out status of data capturing and cookies/localstorage for this PostHog instance.",
                    "details": "This method clears the user's opt in/out status of data capturing and cookies/localstorage for this PostHog instance.",
                    "id": "clear_opt_in_out_capturing",
                    "showDocs": true,
                    "title": "clear_opt_in_out_capturing",
                    "examples": [
                        {
                            "id": "",
                            "name": "",
                            "code": "\nposthog.clear_opt_in_out_capturing();\n\n\n"
                        }
                    ],
                    "releaseTag": "public",
                    "params": [],
                    "returnType": {
                        "id": "void",
                        "name": "void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Creates a person profile for the current user, if they don't already have one and config.person_profiles is set to 'identified_only'. Produces a warning and does not create a profile if config.person_profiles is set to 'never'.",
                    "details": null,
                    "id": "createPersonProfile",
                    "showDocs": true,
                    "title": "createPersonProfile",
                    "examples": [
                        {
                            "id": "createpersonprofile",
                            "name": "Generated example for createPersonProfile",
                            "code": "\n// Generated example for createPersonProfile\nposthog.createPersonProfile();\n    "
                        }
                    ],
                    "releaseTag": "public",
                    "params": [],
                    "returnType": {
                        "id": "void",
                        "name": "void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Enables or disables debug mode. You can also enable debug mode by appending `?__posthog_debug=true` to the URL",
                    "details": null,
                    "id": "debug",
                    "showDocs": true,
                    "title": "debug",
                    "examples": [
                        {
                            "id": "debug",
                            "name": "Generated example for debug",
                            "code": "\n// Generated example for debug\nposthog.debug();\n    "
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "If true, will enable debug mode.",
                            "isOptional": true,
                            "type": "boolean",
                            "name": "debug"
                        }
                    ],
                    "returnType": {
                        "id": "void",
                        "name": "void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Returns the current distinct id of the user. This is either the id automatically generated by the library or the id that has been passed by a call to identify().",
                    "details": "get_distinct_id() can only be called after the PostHog library has finished loading. init() has a loaded function available to handle this automatically.",
                    "id": "get_distinct_id",
                    "showDocs": true,
                    "title": "get_distinct_id",
                    "examples": [
                        {
                            "id": "",
                            "name": "",
                            "code": "\n\n```\n\n// Get the current distinct ID\n\nconst distinctId = posthog.get_distinct_id();\n\n// Use the distinct ID after PostHog has loaded\n\nposthog.init('YOUR PROJECT TOKEN', { loaded: function(posthog) { const distinctId = posthog.get_distinct_id(); // Use distinctId... } });\n\n\n"
                        }
                    ],
                    "releaseTag": "public",
                    "params": [],
                    "returnType": {
                        "id": "string",
                        "name": "string"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Returns the value of the super property named property_name. If no such property is set, get_property() will return the undefined value.\n### Notes:\nget_property() can only be called after the PostHog library has finished loading. init() has a loaded function available to handle this automatically. For example:\n// grab value for '$user_id' after the posthog library has loaded posthog.init('YOUR PROJECT TOKEN',  loaded: function(posthog)  user_id = posthog.get_property('$user_id');  );",
                    "details": null,
                    "id": "get_property",
                    "showDocs": true,
                    "title": "get_property",
                    "examples": [
                        {
                            "id": "get_property",
                            "name": "Generated example for get_property",
                            "code": "\n// Generated example for get_property\nposthog.get_property();\n    "
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "The name of the super property you want to retrieve",
                            "isOptional": false,
                            "type": "string",
                            "name": "property_name"
                        }
                    ],
                    "returnType": {
                        "id": "Property | undefined",
                        "name": "Property | undefined"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Returns the Replay url for the current session.",
                    "details": null,
                    "id": "get_session_replay_url",
                    "showDocs": true,
                    "title": "get_session_replay_url",
                    "examples": [
                        {
                            "id": "get_session_replay_url",
                            "name": "Generated example for get_session_replay_url",
                            "code": "\n// Generated example for get_session_replay_url\nposthog.get_session_replay_url();\n    "
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "Options for the url",
                            "isOptional": true,
                            "type": "{\n        withTimestamp?: boolean;\n        timestampLookBack?: number;\n    }",
                            "name": "options"
                        }
                    ],
                    "returnType": {
                        "id": "string",
                        "name": "string"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Get surveys that should be enabled for the current user.",
                    "details": null,
                    "id": "getActiveMatchingSurveys",
                    "showDocs": true,
                    "title": "getActiveMatchingSurveys",
                    "examples": [
                        {
                            "id": "getactivematchingsurveys",
                            "name": "Generated example for getActiveMatchingSurveys",
                            "code": "\n// Generated example for getActiveMatchingSurveys\nposthog.getActiveMatchingSurveys();\n    "
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "No description available",
                            "isOptional": false,
                            "type": "SurveyCallback",
                            "name": "callback"
                        },
                        {
                            "description": "No description available",
                            "isOptional": true,
                            "type": "boolean",
                            "name": "forceReload"
                        }
                    ],
                    "returnType": {
                        "id": "void",
                        "name": "void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Get the list of early access features. To check enrollment status, use `isFeatureEnabled`.",
                    "details": null,
                    "id": "getEarlyAccessFeatures",
                    "showDocs": true,
                    "title": "getEarlyAccessFeatures",
                    "examples": [
                        {
                            "id": "getearlyaccessfeatures",
                            "name": "Generated example for getEarlyAccessFeatures",
                            "code": "\n// Generated example for getEarlyAccessFeatures\nposthog.getEarlyAccessFeatures();\n    "
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "No description available",
                            "isOptional": false,
                            "type": "EarlyAccessFeatureCallback",
                            "name": "callback"
                        },
                        {
                            "description": "No description available",
                            "isOptional": true,
                            "type": "boolean",
                            "name": "force_reload"
                        },
                        {
                            "description": "No description available",
                            "isOptional": true,
                            "type": "EarlyAccessFeatureStage[]",
                            "name": "stages"
                        }
                    ],
                    "returnType": {
                        "id": "void",
                        "name": "void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Get the value of a feature flag for the current user.",
                    "details": null,
                    "id": "getFeatureFlag",
                    "showDocs": true,
                    "title": "getFeatureFlag",
                    "examples": [
                        {
                            "id": "",
                            "name": "",
                            "code": "\nif (posthog.getFeatureFlag('beta-feature') === 'some-value') {\n   // do something\n}\n\n\n"
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "The key of the feature flag.",
                            "isOptional": false,
                            "type": "string",
                            "name": "key"
                        },
                        {
                            "description": "If `send_event` is false, no `$feature_flag_called` event will be sent.",
                            "isOptional": true,
                            "type": "{\n        send_event?: boolean;\n    }",
                            "name": "options"
                        }
                    ],
                    "returnType": {
                        "id": "boolean | string | undefined",
                        "name": "boolean | string | undefined"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Get the payload of a feature flag for the current user.",
                    "details": null,
                    "id": "getFeatureFlagPayload",
                    "showDocs": true,
                    "title": "getFeatureFlagPayload",
                    "examples": [
                        {
                            "id": "",
                            "name": "",
                            "code": "\nconst flagPayload = posthog.getFeatureFlagPayload('my-feature-flag');\n\n\n"
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "The key of the feature flag.",
                            "isOptional": false,
                            "type": "string",
                            "name": "key"
                        }
                    ],
                    "returnType": {
                        "id": "JsonType",
                        "name": "JsonType"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "No description available",
                    "details": null,
                    "id": "getGroups",
                    "showDocs": true,
                    "title": "getGroups",
                    "examples": [],
                    "releaseTag": "public",
                    "params": [],
                    "returnType": {
                        "id": "Record<string, any>",
                        "name": "Record<string, any>"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "No description available",
                    "details": null,
                    "id": "getPageViewId",
                    "showDocs": true,
                    "title": "getPageViewId",
                    "examples": [],
                    "releaseTag": "public",
                    "params": [],
                    "returnType": {
                        "id": "string | undefined",
                        "name": "string | undefined"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Returns the current session ID.",
                    "details": "This method returns the current session ID.",
                    "id": "getSessionId",
                    "showDocs": true,
                    "title": "getSessionId",
                    "examples": [
                        {
                            "id": "",
                            "name": "",
                            "code": "\n\n``` const sessionId = posthog.getSessionId();\n\n\n"
                        }
                    ],
                    "releaseTag": "public",
                    "params": [],
                    "returnType": {
                        "id": "string",
                        "name": "string"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Returns the value of the session super property named property_name. If no such property is set, getSessionProperty() will return the undefined value.\n### Notes:\nThis is based on browser-level `sessionStorage`, NOT the PostHog session. getSessionProperty() can only be called after the PostHog library has finished loading. init() has a loaded function available to handle this automatically. For example:\n// grab value for 'user_id' after the posthog library has loaded posthog.init('YOUR PROJECT TOKEN',  loaded: function(posthog)  user_id = posthog.getSessionProperty('user_id');  );",
                    "details": null,
                    "id": "getSessionProperty",
                    "showDocs": true,
                    "title": "getSessionProperty",
                    "examples": [
                        {
                            "id": "getsessionproperty",
                            "name": "Generated example for getSessionProperty",
                            "code": "\n// Generated example for getSessionProperty\nposthog.getSessionProperty();\n    "
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "The name of the session super property you want to retrieve",
                            "isOptional": false,
                            "type": "string",
                            "name": "property_name"
                        }
                    ],
                    "returnType": {
                        "id": "Property | undefined",
                        "name": "Property | undefined"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Get list of all surveys.",
                    "details": null,
                    "id": "getSurveys",
                    "showDocs": true,
                    "title": "getSurveys",
                    "examples": [
                        {
                            "id": "getsurveys",
                            "name": "Generated example for getSurveys",
                            "code": "\n// Generated example for getSurveys\nposthog.getSurveys();\n    "
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "No description available",
                            "isOptional": false,
                            "type": "SurveyCallback",
                            "name": "callback"
                        },
                        {
                            "description": "No description available",
                            "isOptional": true,
                            "type": "boolean",
                            "name": "forceReload"
                        }
                    ],
                    "returnType": {
                        "id": "void",
                        "name": "void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Returns the current window ID.",
                    "details": "This method returns the current window ID.",
                    "id": "getWindowId",
                    "showDocs": true,
                    "title": "getWindowId",
                    "examples": [
                        {
                            "id": "",
                            "name": "",
                            "code": "\n\n``` const windowId = posthog.getWindowId();\n\n\n"
                        }
                    ],
                    "releaseTag": "public",
                    "params": [],
                    "returnType": {
                        "id": "string",
                        "name": "string"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Sets group analytics information for subsequent events and reloads feature flags.",
                    "details": "This method sets group analytics information for subsequent events and reloads feature flags. If the group key changes, stored group properties are removed.",
                    "id": "group",
                    "showDocs": true,
                    "title": "group",
                    "examples": [
                        {
                            "id": "",
                            "name": "",
                            "code": "\n\n``` posthog.group('organization', 'org::5', { name: 'Acme Inc.', employees: 100 });\n\n\n"
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "Group type (example: 'organization')",
                            "isOptional": false,
                            "type": "string",
                            "name": "groupType"
                        },
                        {
                            "description": "Group key (example: 'org::5')",
                            "isOptional": false,
                            "type": "string",
                            "name": "groupKey"
                        },
                        {
                            "description": "Optional properties to set for group",
                            "isOptional": true,
                            "type": "Properties",
                            "name": "groupPropertiesToSet"
                        }
                    ],
                    "returnType": {
                        "id": "void",
                        "name": "void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Check whether the user has opted in to data capturing and cookies/localstorage for this PostHog instance",
                    "details": null,
                    "id": "has_opted_in_capturing",
                    "showDocs": true,
                    "title": "has_opted_in_capturing",
                    "examples": [
                        {
                            "id": "has_opted_in_capturing",
                            "name": "Generated example for has_opted_in_capturing",
                            "code": "\n// Generated example for has_opted_in_capturing\nposthog.has_opted_in_capturing();\n    "
                        }
                    ],
                    "releaseTag": "public",
                    "params": [],
                    "returnType": {
                        "id": "boolean",
                        "name": "boolean"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Check whether the user has opted out of data capturing and cookies/localstorage for this PostHog instance",
                    "details": null,
                    "id": "has_opted_out_capturing",
                    "showDocs": true,
                    "title": "has_opted_out_capturing",
                    "examples": [
                        {
                            "id": "has_opted_out_capturing",
                            "name": "Generated example for has_opted_out_capturing",
                            "code": "\n// Generated example for has_opted_out_capturing\nposthog.has_opted_out_capturing();\n    "
                        }
                    ],
                    "releaseTag": "public",
                    "params": [],
                    "returnType": {
                        "id": "boolean",
                        "name": "boolean"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Identify a user with a unique ID instead of a PostHog randomly generated distinct_id. If the method is never called, then unique visitors will be identified by a UUID that is generated the first time they visit the site.",
                    "details": "If user properties are passed, they are also sent to posthog.\n### Usage:\nposthog.identify('[user unique id]') posthog.identify('[user unique id]',  email: 'johnexample.com' ) posthog.identify('[user unique id]', ,  referral_code: '12345' )\n### Notes:\nYou can call this function to overwrite a previously set unique ID for the current user.\nIf the user has been identified ($user_state in persistence is set to 'identified'), then capture of $identify is skipped to avoid merging users. For example, if your system allows an admin user to impersonate another user.\nThen a single browser instance can have:\n`identify('a') -> capture(1) -> identify('b') -> capture(2)`\nand capture 1 and capture 2 will have the correct distinct_id. but users a and b will NOT be merged in posthog.\nHowever, if reset is called then:\n`identify('a') -> capture(1) -> reset() -> capture(2) -> identify('b') -> capture(3)`\nusers a and b are not merged. Capture 1 is associated with user a. A new distinct id is generated for capture 2. which is merged with user b. So, capture 2 and 3 are associated with user b.\nIf you want to merge two identified users, you can call posthog.alias",
                    "id": "identify",
                    "showDocs": true,
                    "title": "identify",
                    "examples": [
                        {
                            "id": "",
                            "name": "",
                            "code": "\n\n```\n\nposthog.identify('distinct_id', { email: 'max@hedgehogmail.com', name: 'Max Hedgehog' }, { first_visited_url: '/blog' });\n\n\n"
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "A string that uniquely identifies a user. If not provided, the distinct_id currently in the persistent store (cookie or localStorage) will be used.",
                            "isOptional": true,
                            "type": "string",
                            "name": "new_distinct_id"
                        },
                        {
                            "description": "Optional: An associative array of properties to store about the user. Note: For feature flag evaluations, if the same key is present in the userPropertiesToSetOnce, it will be overwritten by the value in userPropertiesToSet.",
                            "isOptional": true,
                            "type": "Properties",
                            "name": "userPropertiesToSet"
                        },
                        {
                            "description": "Optional: An associative array of properties to store about the user. If property is previously set, this does not override that value.",
                            "isOptional": true,
                            "type": "Properties",
                            "name": "userPropertiesToSetOnce"
                        }
                    ],
                    "returnType": {
                        "id": "void",
                        "name": "void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "Initialization",
                    "description": "Initializes a new instance of the PostHog capturing object.",
                    "details": "All new instances are added to the main posthog object as sub properties (such as `posthog.library_name`) and also returned by this function. [Learn more about configuration options](/docs/libraries/js/config)",
                    "id": "init",
                    "showDocs": true,
                    "title": "init",
                    "examples": [
                        {
                            "id": "basic_initialization",
                            "name": "basic initialization",
                            "code": "\n// basic initialization\nposthog.init(\n'<ph_project_api_key>', {\n    api_host: '<ph_client_api_host>',\n    defaults: '<ph_posthog_js_defaults>'\n})\n\n"
                        },
                        {
                            "id": "multiple_instances",
                            "name": "multiple instances",
                            "code": "\n// multiple instances\nposthog.init('<ph_project_api_key>', {}, 'project1')\nposthog.init('<ph_project_api_key>', {}, 'project2')\n\n"
                        },
                        {
                            "id": "with_a_callback",
                            "name": "with a callback",
                            "code": "\n// with a callback\nposthog.init('<ph_project_api_key>', {\n    before_send: (event: CaptureResult | null): CaptureResult | null => {\n        if (!event) {\n            return null\n        }\n        event.properties = {\n            ...event.properties,\n            <property_name>: '<override_value>'\n        }\n\n        event.$set = {\n            ...event.$set,\n            <property_name>: '<override_value>'\n        }\n        event.$set_once = {\n            ...event.$set_once,\n            <property_name>: '<override_value>'\n        }\n\n        return event\n    }\n})\n\n\n"
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "Your PostHog API token",
                            "isOptional": false,
                            "type": "string",
                            "name": "token"
                        },
                        {
                            "description": "A dictionary of config options to override. See [default config options](https://github.com/posthog/posthog-js/blob/6e0e873/src/posthog-core.js#L57-L91)",
                            "isOptional": true,
                            "type": "OnlyValidKeys<Partial<PostHogConfig>, Partial<PostHogConfig>>",
                            "name": "config"
                        },
                        {
                            "description": "The name for the new posthog instance that you want created",
                            "isOptional": true,
                            "type": "string",
                            "name": "name"
                        }
                    ],
                    "returnType": {
                        "id": "PostHog",
                        "name": "PostHog"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Checks if a feature flag is enabled for the current user.",
                    "details": "This method checks if a feature flag is enabled for the current user. If the flag is not found or there is an error, it returns undefined.",
                    "id": "isFeatureEnabled",
                    "showDocs": true,
                    "title": "isFeatureEnabled",
                    "examples": [
                        {
                            "id": "",
                            "name": "",
                            "code": "\n\n``` if (posthog.isFeatureEnabled('my-feature-flag')) { // Feature is enabled }\n\n\n"
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "The key of the feature flag",
                            "isOptional": false,
                            "type": "string",
                            "name": "key"
                        },
                        {
                            "description": "Optional configuration for the feature flag request",
                            "isOptional": true,
                            "type": "{\n        send_event: boolean;\n    }",
                            "name": "options"
                        }
                    ],
                    "returnType": {
                        "id": "boolean | undefined",
                        "name": "boolean | undefined"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "returns a boolean indicating whether the toolbar loaded",
                    "details": null,
                    "id": "loadToolbar",
                    "showDocs": true,
                    "title": "loadToolbar",
                    "examples": [
                        {
                            "id": "loadtoolbar",
                            "name": "Generated example for loadToolbar",
                            "code": "\n// Generated example for loadToolbar\nposthog.loadToolbar();\n    "
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "No description available",
                            "isOptional": false,
                            "type": "ToolbarParams",
                            "name": "params"
                        }
                    ],
                    "returnType": {
                        "id": "boolean",
                        "name": "boolean"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Exposes a set of events that PostHog will emit. e.g. `eventCaptured` is emitted immediately before trying to send an event\nUnlike `onFeatureFlags` and `onSessionId` these are not called when the listener is registered, the first callback will be the next event _after_ registering a listener",
                    "details": null,
                    "id": "on",
                    "showDocs": true,
                    "title": "on",
                    "examples": [
                        {
                            "id": "on",
                            "name": "Generated example for on",
                            "code": "\n// Generated example for on\nposthog.on();\n    "
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "No description available",
                            "isOptional": false,
                            "type": "'eventCaptured'",
                            "name": "event"
                        },
                        {
                            "description": "No description available",
                            "isOptional": false,
                            "type": "(...args: any[]) => void",
                            "name": "cb"
                        }
                    ],
                    "returnType": {
                        "id": "() => void",
                        "name": "() => void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "No description available",
                    "details": null,
                    "id": "onFeatureFlags",
                    "showDocs": true,
                    "title": "onFeatureFlags",
                    "examples": [],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "No description available",
                            "isOptional": false,
                            "type": "FeatureFlagsCallback",
                            "name": "callback"
                        }
                    ],
                    "returnType": {
                        "id": "() => void",
                        "name": "() => void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "No description available",
                    "details": null,
                    "id": "onSessionId",
                    "showDocs": true,
                    "title": "onSessionId",
                    "examples": [],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "No description available",
                            "isOptional": false,
                            "type": "SessionIdChangedCallback",
                            "name": "callback"
                        }
                    ],
                    "returnType": {
                        "id": "() => void",
                        "name": "() => void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "No description available",
                    "details": null,
                    "id": "onSurveysLoaded",
                    "showDocs": true,
                    "title": "onSurveysLoaded",
                    "examples": [],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "No description available",
                            "isOptional": false,
                            "type": "SurveyCallback",
                            "name": "callback"
                        }
                    ],
                    "returnType": {
                        "id": "() => void",
                        "name": "() => void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Opt the user in to data capturing and cookies/localstorage for this PostHog instance If the config.opt_out_persistence_by_default is set to false, the SDK persistence will be enabled.",
                    "details": null,
                    "id": "opt_in_capturing",
                    "showDocs": true,
                    "title": "opt_in_capturing",
                    "examples": [
                        {
                            "id": "opt_user_in",
                            "name": "Opt user in",
                            "code": "\n\n// Opt user in\n\nposthog.opt_in_capturing();\n\n@example\n\n// Opt user in with specific event name, properties\n\nposthog.opt_in_capturing({ capture_event_name: 'User opted in', capture_properties: { 'email': 'jdoe@example.com' } });\n\n\n"
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "No description available",
                            "isOptional": true,
                            "type": "{\n        captureEventName?: EventName | null | false; /** event name to be used for capturing the opt-in action */\n        captureProperties?: Properties; /** set of properties to be captured along with the opt-in action */\n    }",
                            "name": "options"
                        }
                    ],
                    "returnType": {
                        "id": "void",
                        "name": "void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Opt the user out of data capturing and cookies/localstorage for this PostHog instance. If the config.opt_out_persistence_by_default is set to true, the SDK persistence will be disabled.",
                    "details": null,
                    "id": "opt_out_capturing",
                    "showDocs": true,
                    "title": "opt_out_capturing",
                    "examples": [
                        {
                            "id": "opt_out_capturing",
                            "name": "Generated example for opt_out_capturing",
                            "code": "\n// Generated example for opt_out_capturing\nposthog.opt_out_capturing();\n    "
                        }
                    ],
                    "releaseTag": "public",
                    "params": [],
                    "returnType": {
                        "id": "void",
                        "name": "void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Pushes a command to the PostHog command queue.",
                    "details": "This is only useful for external integrations that do not wish to rely on our convenience methods (created in the snippet). The push method keeps the standard async-array-push behavior around after the lib is loaded.",
                    "id": "push",
                    "showDocs": true,
                    "title": "push",
                    "examples": [
                        {
                            "id": "push_a_register_command_to_the_queue",
                            "name": "Push a register command to the queue",
                            "code": "\n// Push a register command to the queue\nposthog.push(['register', { a: 'b' }]);\n\n\n"
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "A [function_name, args...] array to be executed",
                            "isOptional": false,
                            "type": "SnippetArrayItem",
                            "name": "item"
                        }
                    ],
                    "returnType": {
                        "id": "void",
                        "name": "void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Register a set of super properties, which are included with all events for the current session.",
                    "details": "These properties will overwrite any existing super properties for the duration of the session. They are cleared when the session ends.",
                    "id": "register_for_session",
                    "showDocs": true,
                    "title": "register_for_session",
                    "examples": [
                        {
                            "id": "register_on_all_events_this_session",
                            "name": "register on all events this session",
                            "code": "\n// register on all events this session\nposthog.register_for_session({'referer': document.referrer});\n\n"
                        },
                        {
                            "id": "register_several_session_super_properties_when_a_user_signs_up",
                            "name": "register several session super properties when a user signs up",
                            "code": "\n// register several session super properties when a user signs up\nposthog.register_for_session({\n    'selectedPlan': 'pro',\n    'completedSteps': 4,\n});\n\n"
                        },
                        {
                            "id": "display_the_properties",
                            "name": "Display the properties",
                            "code": "\n// Display the properties\nconsole.log(posthog.sessionPersistence.properties())\n\n\n"
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "An object of properties to store for the session.",
                            "isOptional": false,
                            "type": "Properties",
                            "name": "properties"
                        }
                    ],
                    "returnType": {
                        "id": "void",
                        "name": "void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Register a set of super properties only once. These will not overwrite previous super property values, unlike register().",
                    "details": "### Usage:\n// register a super property for the first time only posthog.register_once( 'First Login Date': new Date().toISOString() );\n// Display the properties console.log(posthog.persistence.properties())\n### Notes:\nIf default_value is specified, current super properties with that value will be overwritten.",
                    "id": "register_once",
                    "showDocs": true,
                    "title": "register_once",
                    "examples": [
                        {
                            "id": "register_a_super_property_for_the_first_time_only",
                            "name": "register a super property for the first time only",
                            "code": "\n// register a super property for the first time only\nposthog.register_once({\n    'First Login Date': new Date().toISOString()\n});\n\n\n"
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "An associative array of properties to store about the user",
                            "isOptional": false,
                            "type": "Properties",
                            "name": "properties"
                        },
                        {
                            "description": "If specified, current super properties with this value will be overwritten",
                            "isOptional": true,
                            "type": "Property",
                            "name": "default_value"
                        },
                        {
                            "description": "How many days since the users last visit to store the super properties",
                            "isOptional": true,
                            "type": "number",
                            "name": "days"
                        }
                    ],
                    "returnType": {
                        "id": "void",
                        "name": "void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Register a set of super properties, which are included with all events. This will overwrite previous super property values, except for session properties (see `register_for_session(properties)`).",
                    "details": "### Usage:\n// register 'Gender' as a super property posthog.register('Gender': 'Female');\n// register several super properties when a user signs up posthog.register( 'Email': 'jdoeexample.com', 'Account Type': 'Free' );\n// Display the properties console.log(posthog.persistence.properties())",
                    "id": "register",
                    "showDocs": true,
                    "title": "register",
                    "examples": [
                        {
                            "id": "register_'gender'_as_a_super_property",
                            "name": "register 'Gender' as a super property",
                            "code": "\n// register 'Gender' as a super property\nposthog.register({'Gender': 'Female'});\n\n"
                        },
                        {
                            "id": "register_several_super_properties_when_a_user_signs_up",
                            "name": "register several super properties when a user signs up",
                            "code": "\n// register several super properties when a user signs up\nposthog.register({\n    'Email': 'jdoe@example.com',\n    'Account Type': 'Free'\n});\n\n\n"
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "An associative array of properties to store about the user",
                            "isOptional": false,
                            "type": "Properties",
                            "name": "properties"
                        },
                        {
                            "description": "How many days since the user's last visit to store the super properties",
                            "isOptional": true,
                            "type": "number",
                            "name": "days"
                        }
                    ],
                    "returnType": {
                        "id": "void",
                        "name": "void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "No description available",
                    "details": null,
                    "id": "reloadFeatureFlags",
                    "showDocs": true,
                    "title": "reloadFeatureFlags",
                    "examples": [],
                    "releaseTag": "public",
                    "params": [],
                    "returnType": {
                        "id": "void",
                        "name": "void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Render a survey on a specific element.",
                    "details": null,
                    "id": "renderSurvey",
                    "showDocs": true,
                    "title": "renderSurvey",
                    "examples": [
                        {
                            "id": "rendersurvey",
                            "name": "Generated example for renderSurvey",
                            "code": "\n// Generated example for renderSurvey\nposthog.renderSurvey();\n    "
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "No description available",
                            "isOptional": false,
                            "type": "string",
                            "name": "surveyId"
                        },
                        {
                            "description": "No description available",
                            "isOptional": false,
                            "type": "string",
                            "name": "selector"
                        }
                    ],
                    "returnType": {
                        "id": "void",
                        "name": "void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "NB reset is normally only called when a user logs out calling reset at the wrong time can lead to unexpected results like split sessions\nResets all info. For example: session id, super properties, sets a random distinct_id and more.",
                    "details": null,
                    "id": "reset",
                    "showDocs": true,
                    "title": "reset",
                    "examples": [
                        {
                            "id": "",
                            "name": "",
                            "code": "\n\n```\n\n// Reset all user data when they log out\n\nposthog.reset();\n\n// Reset all user data including device ID\n\nposthog.reset(true);\n\n\n"
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "If true, also resets the device ID. Default: false",
                            "isOptional": true,
                            "type": "boolean",
                            "name": "reset_device_id"
                        }
                    ],
                    "returnType": {
                        "id": "void",
                        "name": "void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "No description available",
                    "details": null,
                    "id": "resetGroupPropertiesForFlags",
                    "showDocs": true,
                    "title": "resetGroupPropertiesForFlags",
                    "examples": [],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "No description available",
                            "isOptional": true,
                            "type": "string",
                            "name": "group_type"
                        }
                    ],
                    "returnType": {
                        "id": "void",
                        "name": "void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Resets only the group properties of the user currently logged in.",
                    "details": null,
                    "id": "resetGroups",
                    "showDocs": true,
                    "title": "resetGroups",
                    "examples": [
                        {
                            "id": "resetgroups",
                            "name": "Generated example for resetGroups",
                            "code": "\n// Generated example for resetGroups\nposthog.resetGroups();\n    "
                        }
                    ],
                    "releaseTag": "public",
                    "params": [],
                    "returnType": {
                        "id": "void",
                        "name": "void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "No description available",
                    "details": null,
                    "id": "resetPersonPropertiesForFlags",
                    "showDocs": true,
                    "title": "resetPersonPropertiesForFlags",
                    "examples": [],
                    "releaseTag": "public",
                    "params": [],
                    "returnType": {
                        "id": "void",
                        "name": "void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "returns a boolean indicating whether session recording is currently running",
                    "details": null,
                    "id": "sessionRecordingStarted",
                    "showDocs": true,
                    "title": "sessionRecordingStarted",
                    "examples": [
                        {
                            "id": "sessionrecordingstarted",
                            "name": "Generated example for sessionRecordingStarted",
                            "code": "\n// Generated example for sessionRecordingStarted\nposthog.sessionRecordingStarted();\n    "
                        }
                    ],
                    "releaseTag": "public",
                    "params": [],
                    "returnType": {
                        "id": "boolean",
                        "name": "boolean"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "Initialization",
                    "description": "Update the configuration of a posthog library instance.\n[Learn more about configuration options](/docs/libraries/js/config)",
                    "details": null,
                    "id": "set_config",
                    "showDocs": true,
                    "title": "set_config",
                    "examples": [
                        {
                            "id": "set_the_debug_flag_to_true",
                            "name": "Set the debug flag to true",
                            "code": "\n// Set the debug flag to true\nposthog.set_config({ debug: true });\n\n\n"
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "A dictionary of new configuration values to update",
                            "isOptional": false,
                            "type": "Partial<PostHogConfig>",
                            "name": "config"
                        }
                    ],
                    "returnType": {
                        "id": "void",
                        "name": "void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Set override group properties for feature flags. This is used when dealing with new groups / where you don't want to wait for ingestion to update properties.",
                    "details": "This method sets override group properties for feature flags. It is used when dealing with new groups or when you don't want to wait for ingestion to update properties.",
                    "id": "setGroupPropertiesForFlags",
                    "showDocs": true,
                    "title": "setGroupPropertiesForFlags",
                    "examples": [
                        {
                            "id": "",
                            "name": "",
                            "code": "\n\n``` posthog.setGroupPropertiesForFlags({ 'organization': { name: 'Acme Inc.', employees: 100 } });\n\n\n"
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "An associative array of properties to store about the group",
                            "isOptional": false,
                            "type": "{\n        [type: string]: Properties;\n    }",
                            "name": "properties"
                        },
                        {
                            "description": "Whether to reload feature flags after setting properties",
                            "isOptional": true,
                            "type": "boolean",
                            "name": "reloadFeatureFlags"
                        }
                    ],
                    "returnType": {
                        "id": "void",
                        "name": "void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Sets properties for the Person associated with the current distinct_id. If config.person_profiles is set to identified_only, and a Person profile has not been created yet, this will create one.",
                    "details": null,
                    "id": "setPersonProperties",
                    "showDocs": true,
                    "title": "setPersonProperties",
                    "examples": [
                        {
                            "id": "setpersonproperties",
                            "name": "Generated example for setPersonProperties",
                            "code": "\n// Generated example for setPersonProperties\nposthog.setPersonProperties();\n    "
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "Optional: An associative array of properties to store about the user. Note: For feature flag evaluations, if the same key is present in the userPropertiesToSetOnce, it will be overwritten by the value in userPropertiesToSet.",
                            "isOptional": true,
                            "type": "Properties",
                            "name": "userPropertiesToSet"
                        },
                        {
                            "description": "Optional: An associative array of properties to store about the user. If property is previously set, this does not override that value.",
                            "isOptional": true,
                            "type": "Properties",
                            "name": "userPropertiesToSetOnce"
                        }
                    ],
                    "returnType": {
                        "id": "void",
                        "name": "void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Set override person properties for feature flags. This is used when dealing with new persons / where you don't want to wait for ingestion to update user properties.",
                    "details": "This is used when dealing with new persons or when you don't want to wait for ingestion to update user properties.",
                    "id": "setPersonPropertiesForFlags",
                    "showDocs": true,
                    "title": "setPersonPropertiesForFlags",
                    "examples": [
                        {
                            "id": "",
                            "name": "",
                            "code": "\n\n``` posthog.setPersonPropertiesForFlags({ email: 'user@example.com', plan: 'pro' });\n\n\n"
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "An associative array of properties to store about the user",
                            "isOptional": false,
                            "type": "Properties",
                            "name": "properties"
                        },
                        {
                            "description": "Whether to reload feature flags after setting properties",
                            "isOptional": true,
                            "type": "boolean",
                            "name": "reloadFeatureFlags"
                        }
                    ],
                    "returnType": {
                        "id": "void",
                        "name": "void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "turns session recording on, and updates the config option `disable_session_recording` to false",
                    "details": null,
                    "id": "startSessionRecording",
                    "showDocs": true,
                    "title": "startSessionRecording",
                    "examples": [
                        {
                            "id": "startsessionrecording",
                            "name": "Generated example for startSessionRecording",
                            "code": "\n// Generated example for startSessionRecording\nposthog.startSessionRecording();\n    "
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "optional boolean to override the default sampling behavior - ensures the next session recording to start will not be skipped by sampling or linked_flag config. `true` is shorthand for  sampling: true, linked_flag: true",
                            "isOptional": true,
                            "type": "{\n        sampling?: boolean;\n        linked_flag?: boolean;\n        url_trigger?: true;\n        event_trigger?: true;\n    } | true",
                            "name": "override"
                        }
                    ],
                    "returnType": {
                        "id": "void",
                        "name": "void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "turns session recording off, and updates the config option disable_session_recording to true",
                    "details": null,
                    "id": "stopSessionRecording",
                    "showDocs": true,
                    "title": "stopSessionRecording",
                    "examples": [
                        {
                            "id": "stopsessionrecording",
                            "name": "Generated example for stopSessionRecording",
                            "code": "\n// Generated example for stopSessionRecording\nposthog.stopSessionRecording();\n    "
                        }
                    ],
                    "releaseTag": "public",
                    "params": [],
                    "returnType": {
                        "id": "void",
                        "name": "void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Returns a string representation of the PostHog instance.",
                    "details": "This method returns a string representation of the PostHog instance.",
                    "id": "toString",
                    "showDocs": true,
                    "title": "toString",
                    "examples": [
                        {
                            "id": "",
                            "name": "",
                            "code": "\n\n``` const instanceName = posthog.toString();\n\n\n"
                        }
                    ],
                    "releaseTag": "public",
                    "params": [],
                    "returnType": {
                        "id": "string",
                        "name": "string"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Deletes a session super property stored with the current user.",
                    "details": null,
                    "id": "unregister_for_session",
                    "showDocs": true,
                    "title": "unregister_for_session",
                    "examples": [
                        {
                            "id": "",
                            "name": "",
                            "code": "\nposthog.unregister_for_session('referer');\n\n\n"
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "The name of the session super property to remove.",
                            "isOptional": false,
                            "type": "string",
                            "name": "property"
                        }
                    ],
                    "returnType": {
                        "id": "void",
                        "name": "void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Deletes a super property stored with the current user.",
                    "details": null,
                    "id": "unregister",
                    "showDocs": true,
                    "title": "unregister",
                    "examples": [
                        {
                            "id": "",
                            "name": "",
                            "code": "\nposthog.unregister('Gender');\n\n\n"
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "The name of the super property to remove.",
                            "isOptional": false,
                            "type": "string",
                            "name": "property"
                        }
                    ],
                    "returnType": {
                        "id": "void",
                        "name": "void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                },
                {
                    "category": "",
                    "description": "Opt the user in or out of an early access feature.",
                    "details": null,
                    "id": "updateEarlyAccessFeatureEnrollment",
                    "showDocs": true,
                    "title": "updateEarlyAccessFeatureEnrollment",
                    "examples": [
                        {
                            "id": "updateearlyaccessfeatureenrollment",
                            "name": "Generated example for updateEarlyAccessFeatureEnrollment",
                            "code": "\n// Generated example for updateEarlyAccessFeatureEnrollment\nposthog.updateEarlyAccessFeatureEnrollment();\n    "
                        }
                    ],
                    "releaseTag": "public",
                    "params": [
                        {
                            "description": "No description available",
                            "isOptional": false,
                            "type": "string",
                            "name": "key"
                        },
                        {
                            "description": "No description available",
                            "isOptional": false,
                            "type": "boolean",
                            "name": "isEnrolled"
                        }
                    ],
                    "returnType": {
                        "id": "void",
                        "name": "void"
                    },
                    "path": "lib/src/posthog-core.d.ts"
                }
            ]
        }
    ],
    "types": [
        {
            "id": "ActionStepStringMatching",
            "name": "ActionStepStringMatching",
            "properties": [],
            "path": "lib/src/posthog-surveys-types.d.ts"
        },
        {
            "id": "ActionStepType",
            "name": "ActionStepType",
            "properties": [
                {
                    "description": "No description available",
                    "type": "string | null",
                    "name": "event"
                },
                {
                    "description": "ActionStepStringMatching.Exact",
                    "type": "ActionStepStringMatching | null",
                    "name": "href_matching"
                },
                {
                    "description": "No description available",
                    "type": "string | null",
                    "name": "href"
                },
                {
                    "description": "No description available",
                    "type": "string | null",
                    "name": "selector"
                },
                {
                    "description": "",
                    "type": "string",
                    "name": "tag_name"
                },
                {
                    "description": "StringMatching.Exact",
                    "type": "ActionStepStringMatching | null",
                    "name": "text_matching"
                },
                {
                    "description": "No description available",
                    "type": "string | null",
                    "name": "text"
                },
                {
                    "description": "StringMatching.Contains",
                    "type": "ActionStepStringMatching | null",
                    "name": "url_matching"
                },
                {
                    "description": "No description available",
                    "type": "string | null",
                    "name": "url"
                }
            ],
            "path": "lib/src/posthog-surveys-types.d.ts"
        },
        {
            "id": "AutocaptureCompatibleElement",
            "name": "AutocaptureCompatibleElement",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "AutocaptureConfig",
            "name": "AutocaptureConfig",
            "properties": [
                {
                    "description": "When set to true, autocapture will capture the text of any element that is cut or copied.",
                    "type": "boolean",
                    "name": "capture_copied_text"
                },
                {
                    "description": "List of CSS selectors to allow autocapture on e.g. ['[ph-capture]'] we consider the tree of elements from the root to the target element of the click event so for the tree div  div  button  svg and allow list config `['[id]']` we will capture the click if the click-target or its parents has any id\nEverything is allowed when there's no allowlist",
                    "type": "string[]",
                    "name": "css_selector_allowlist"
                },
                {
                    "description": "List of DOM events to allow autocapture on e.g. ['click', 'change', 'submit']",
                    "type": "DomAutocaptureEvents[]",
                    "name": "dom_event_allowlist"
                },
                {
                    "description": "List of DOM elements to allow autocapture on e.g. ['a', 'button', 'form', 'input', 'select', 'textarea', 'label']\nWe consider the tree of elements from the root to the target element of the click event so for the tree `div > div > button > svg` if the allowlist has `button` then we allow the capture when the `button` or the `svg` is the click target but not if either of the `div`s are detected as the click target",
                    "type": "AutocaptureCompatibleElement[]",
                    "name": "element_allowlist"
                },
                {
                    "description": "Exclude certain element attributes from autocapture E.g. ['aria-label'] or [data-attr-pii]",
                    "type": "string[]",
                    "name": "element_attribute_ignorelist"
                },
                {
                    "description": "List of URLs to allow autocapture on, can be strings to match or regexes e.g. ['https://example.com', 'test.com/.*'] this is useful when you want to autocapture on specific pages only\nif you set both url_allowlist and url_ignorelist, we check the allowlist first and then the ignorelist. the ignorelist can override the allowlist",
                    "type": "(string | RegExp)[]",
                    "name": "url_allowlist"
                },
                {
                    "description": "List of URLs to not allow autocapture on, can be strings to match or regexes e.g. ['https://example.com', 'test.com/.*'] this is useful when you want to autocapture on most pages but not some specific ones\nif you set both url_allowlist and url_ignorelist, we check the allowlist first and then the ignorelist. the ignorelist can override the allowlist",
                    "type": "(string | RegExp)[]",
                    "name": "url_ignorelist"
                }
            ],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "BasicSurveyQuestion",
            "name": "BasicSurveyQuestion",
            "properties": [
                {
                    "description": "No description available",
                    "type": "SurveyQuestionType.Open",
                    "name": "type"
                }
            ],
            "path": "lib/src/posthog-surveys-types.d.ts"
        },
        {
            "id": "BeforeSendFn",
            "name": "BeforeSendFn",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "BootstrapConfig",
            "name": "BootstrapConfig",
            "properties": [
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "distinctID"
                },
                {
                    "description": "No description available",
                    "type": "Record<string, JsonType>",
                    "name": "featureFlagPayloads"
                },
                {
                    "description": "No description available",
                    "type": "Record<string, boolean | string>",
                    "name": "featureFlags"
                },
                {
                    "description": "No description available",
                    "type": "boolean",
                    "name": "isIdentifiedID"
                },
                {
                    "description": "Optionally provide a sessionID, this is so that you can provide an existing sessionID here to continue a user's session across a domain or device. It MUST be: - unique to this user - a valid UUID v7 - the timestamp part must be = the timestamp of the first event in the session - the timestamp of the last event in the session must be  the timestamp part + 24 hours *",
                    "type": "string",
                    "name": "sessionID"
                }
            ],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "Breaker",
            "name": "Breaker",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "CapturedNetworkRequest",
            "name": "CapturedNetworkRequest",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "CaptureOptions",
            "name": "CaptureOptions",
            "properties": [
                {
                    "description": "key of queue, e.g. 'sessionRecording' vs 'event'",
                    "type": "string",
                    "name": "_batchKey"
                },
                {
                    "description": "If set, overrides and disables config.properties_string_max_length",
                    "type": "boolean",
                    "name": "_noTruncate"
                },
                {
                    "description": "Used to override the desired endpoint for the captured event",
                    "type": "string",
                    "name": "_url"
                },
                {
                    "description": "Used when `$identify` is called Will set person properties but only once, it will NOT override previous values",
                    "type": "Properties",
                    "name": "$set_once"
                },
                {
                    "description": "Used when `$identify` is called Will set person properties overriding previous values",
                    "type": "Properties",
                    "name": "$set"
                },
                {
                    "description": "If set, skips the batched queue",
                    "type": "boolean",
                    "name": "send_instantly"
                },
                {
                    "description": "If set, skips the client side rate limiting",
                    "type": "boolean",
                    "name": "skip_client_rate_limiting"
                },
                {
                    "description": "If set, overrides the current timestamp",
                    "type": "Date",
                    "name": "timestamp"
                },
                {
                    "description": "If set, overrides the desired transport method",
                    "type": "RequestWithOptions['transport']",
                    "name": "transport"
                }
            ],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "CaptureResult",
            "name": "CaptureResult",
            "properties": [
                {
                    "description": "No description available",
                    "type": "Properties",
                    "name": "$set_once"
                },
                {
                    "description": "No description available",
                    "type": "Properties",
                    "name": "$set"
                },
                {
                    "description": "No description available",
                    "type": "EventName",
                    "name": "event"
                },
                {
                    "description": "No description available",
                    "type": "Properties",
                    "name": "properties"
                },
                {
                    "description": "No description available",
                    "type": "Date",
                    "name": "timestamp"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "uuid"
                }
            ],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "ConfigDefaults",
            "name": "ConfigDefaults",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "DeadClickCandidate",
            "name": "DeadClickCandidate",
            "properties": [
                {
                    "description": "No description available",
                    "type": "number",
                    "name": "absoluteDelayMs"
                },
                {
                    "description": "No description available",
                    "type": "number",
                    "name": "mutationDelayMs"
                },
                {
                    "description": "No description available",
                    "type": "Element",
                    "name": "node"
                },
                {
                    "description": "No description available",
                    "type": "MouseEvent",
                    "name": "originalEvent"
                },
                {
                    "description": "No description available",
                    "type": "number",
                    "name": "scrollDelayMs"
                },
                {
                    "description": "No description available",
                    "type": "number",
                    "name": "selectionChangedDelayMs"
                },
                {
                    "description": "No description available",
                    "type": "number",
                    "name": "timestamp"
                }
            ],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "DeadClicksAutoCaptureConfig",
            "name": "DeadClicksAutoCaptureConfig",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "DecideResponse",
            "name": "DecideResponse",
            "properties": [
                {
                    "description": "No description available",
                    "type": "boolean",
                    "name": "errorsWhileComputingFlags"
                },
                {
                    "description": "No description available",
                    "type": "Record<string, JsonType>",
                    "name": "featureFlagPayloads"
                },
                {
                    "description": "No description available",
                    "type": "Record<string, string | boolean>",
                    "name": "featureFlags"
                },
                {
                    "description": "No description available",
                    "type": "Record<string, FeatureFlagDetail>",
                    "name": "flags"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "requestId"
                }
            ],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "DomAutocaptureEvents",
            "name": "DomAutocaptureEvents",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "EarlyAccessFeature",
            "name": "EarlyAccessFeature",
            "properties": [
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "description"
                },
                {
                    "description": "No description available",
                    "type": "string | null",
                    "name": "documentationUrl"
                },
                {
                    "description": "No description available",
                    "type": "string | null",
                    "name": "flagKey"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "name"
                },
                {
                    "description": "No description available",
                    "type": "'concept' | 'alpha' | 'beta'",
                    "name": "stage"
                }
            ],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "EarlyAccessFeatureCallback",
            "name": "EarlyAccessFeatureCallback",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "EarlyAccessFeatureResponse",
            "name": "EarlyAccessFeatureResponse",
            "properties": [
                {
                    "description": "No description available",
                    "type": "EarlyAccessFeature[]",
                    "name": "earlyAccessFeatures"
                }
            ],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "EarlyAccessFeatureStage",
            "name": "EarlyAccessFeatureStage",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "ErrorConversions",
            "name": "ErrorConversions",
            "properties": [
                {
                    "description": "No description available",
                    "type": "(args: ErrorEventArgs) => ErrorProperties",
                    "name": "errorToProperties"
                },
                {
                    "description": "No description available",
                    "type": "(args: [ev: PromiseRejectionEvent]) => ErrorProperties",
                    "name": "unhandledRejectionToProperties"
                }
            ],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "ErrorEventArgs",
            "name": "ErrorEventArgs",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "ErrorProperties",
            "name": "ErrorProperties",
            "properties": [
                {
                    "description": "No description available",
                    "type": "number",
                    "name": "$exception_colno"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "$exception_DOMException_code"
                },
                {
                    "description": "No description available",
                    "type": "boolean",
                    "name": "$exception_handled"
                },
                {
                    "description": "No description available",
                    "type": "boolean",
                    "name": "$exception_is_synthetic"
                },
                {
                    "description": "No description available",
                    "type": "SeverityLevel",
                    "name": "$exception_level"
                },
                {
                    "description": "No description available",
                    "type": "number",
                    "name": "$exception_lineno"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "$exception_message"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "$exception_personURL"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "$exception_source"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "$exception_stack_trace_raw"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "$exception_type"
                }
            ],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "ErrorTrackingSuppressionRule",
            "name": "ErrorTrackingSuppressionRule",
            "properties": [
                {
                    "description": "No description available",
                    "type": "'AND' | 'OR'",
                    "name": "type"
                },
                {
                    "description": "No description available",
                    "type": "ErrorTrackingSuppressionRuleValue[]",
                    "name": "values"
                }
            ],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "ErrorTrackingSuppressionRuleValue",
            "name": "ErrorTrackingSuppressionRuleValue",
            "properties": [
                {
                    "description": "No description available",
                    "type": "'$exception_types' | '$exception_messages'",
                    "name": "key"
                },
                {
                    "description": "No description available",
                    "type": "PropertyMatchType",
                    "name": "operator"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "type"
                },
                {
                    "description": "No description available",
                    "type": "string | string[]",
                    "name": "value"
                }
            ],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "EvaluationReason",
            "name": "EvaluationReason",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "EventHandler",
            "name": "EventHandler",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "EventName",
            "name": "EventName",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "ExceptionAutoCaptureConfig",
            "name": "ExceptionAutoCaptureConfig",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "FeatureFlagDetail",
            "name": "FeatureFlagDetail",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "FeatureFlagMetadata",
            "name": "FeatureFlagMetadata",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "FeatureFlagsCallback",
            "name": "FeatureFlagsCallback",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "FlagVariant",
            "name": "FlagVariant",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "Headers_2",
            "name": "Headers_2",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "HeatmapConfig",
            "name": "HeatmapConfig",
            "properties": [
                {
                    "description": "How often to send batched data in `$heatmap_data` events If set to 0 or not set, sends using the default interval of 1 second\n1000",
                    "type": "number",
                    "name": "flush_interval_milliseconds"
                }
            ],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "InitiatorType",
            "name": "InitiatorType",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "JsonRecord",
            "name": "JsonRecord",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "JsonType",
            "name": "JsonType",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "KnownEventName",
            "name": "KnownEventName",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "KnownUnsafeEditableEvent",
            "name": "KnownUnsafeEditableEvent",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "LinkSurveyQuestion",
            "name": "LinkSurveyQuestion",
            "properties": [
                {
                    "description": "No description available",
                    "type": "string | null",
                    "name": "link"
                },
                {
                    "description": "No description available",
                    "type": "SurveyQuestionType.Link",
                    "name": "type"
                }
            ],
            "path": "lib/src/posthog-surveys-types.d.ts"
        },
        {
            "id": "MultipleSurveyQuestion",
            "name": "MultipleSurveyQuestion",
            "properties": [
                {
                    "description": "No description available",
                    "type": "string[]",
                    "name": "choices"
                },
                {
                    "description": "No description available",
                    "type": "boolean",
                    "name": "hasOpenChoice"
                },
                {
                    "description": "No description available",
                    "type": "boolean",
                    "name": "shuffleOptions"
                },
                {
                    "description": "No description available",
                    "type": "boolean",
                    "name": "skipSubmitButton"
                },
                {
                    "description": "No description available",
                    "type": "SurveyQuestionType.SingleChoice | SurveyQuestionType.MultipleChoice",
                    "name": "type"
                }
            ],
            "path": "lib/src/posthog-surveys-types.d.ts"
        },
        {
            "id": "NetworkRecordOptions",
            "name": "NetworkRecordOptions",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "NetworkRequest",
            "name": "NetworkRequest",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "PerformanceCaptureConfig",
            "name": "PerformanceCaptureConfig",
            "properties": [
                {
                    "description": "We observe very large values reported by the Chrome web vitals library These outliers are likely not real, useful values, and we exclude them You can set this to 0 in order to include all values, NB this is not recommended\n15 * 60 * 1000 (15 minutes)",
                    "type": "number",
                    "name": "__web_vitals_max_value"
                },
                {
                    "description": "Works with session replay to use the browser's native performance observer to capture performance metrics",
                    "type": "boolean",
                    "name": "network_timing"
                },
                {
                    "description": "By default all 4 metrics are captured You can set this config to restrict which metrics are captured e.g. ['CLS', 'FCP'] to only capture those two metrics NB setting this does not override whether the capture is enabled\n['LCP', 'CLS', 'FCP', 'INP']",
                    "type": "SupportedWebVitalsMetrics[]",
                    "name": "web_vitals_allowed_metrics"
                },
                {
                    "description": "We delay flushing web vitals metrics to reduce the number of events we send This is the maximum time we will wait before sending the metrics\n5000",
                    "type": "number",
                    "name": "web_vitals_delayed_flush_ms"
                },
                {
                    "description": "Use chrome's web vitals library to wrap fetch and capture web vitals",
                    "type": "boolean",
                    "name": "web_vitals"
                }
            ],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "PersistentStore",
            "name": "PersistentStore",
            "properties": [
                {
                    "description": "No description available",
                    "type": "(error: any) => void",
                    "name": "_error"
                },
                {
                    "description": "No description available",
                    "type": "(name: string) => any",
                    "name": "_get"
                },
                {
                    "description": "No description available",
                    "type": "() => boolean",
                    "name": "_is_supported"
                },
                {
                    "description": "No description available",
                    "type": "(name: string) => any",
                    "name": "_parse"
                },
                {
                    "description": "No description available",
                    "type": "(name: string, cross_subdomain?: boolean) => void",
                    "name": "_remove"
                },
                {
                    "description": "No description available",
                    "type": "(name: string, value: any, expire_days?: number | null, cross_subdomain?: boolean, secure?: boolean, debug?: boolean) => void",
                    "name": "_set"
                }
            ],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "PostHogConfig",
            "name": "PostHogConfig",
            "properties": [
                {
                    "description": "PREVIEW - MAY CHANGE WITHOUT WARNING - DO NOT USE IN PRODUCTION Whether to wrap fetch and add tracing headers to the request",
                    "type": "boolean",
                    "name": "__add_tracing_headers"
                },
                {
                    "description": "PREVIEW - MAY CHANGE WITHOUT WARNING - DO NOT USE IN PRODUCTION Whether to send a sentinel value for distinct id, device id, and session id, which will be replaced server-side by a cookieless hash",
                    "type": "boolean",
                    "name": "__preview_experimental_cookieless_mode"
                },
                {
                    "description": "PREVIEW - MAY CHANGE WITHOUT WARNING - DO NOT USE IN PRODUCTION Whether to use the new /flags/ endpoint",
                    "type": "boolean",
                    "name": "__preview_flags_v2"
                },
                {
                    "description": "PREVIEW - MAY CHANGE WITHOUT WARNING - DO NOT USE IN PRODUCTION Enables the new RemoteConfig approach to loading config instead of decide",
                    "type": "boolean",
                    "name": "__preview_remote_config"
                },
                {
                    "description": "",
                    "type": "(eventName: string, eventData: CaptureResult) => void",
                    "name": "_onCapture"
                },
                {
                    "description": "One of the very first things the PostHog library does when init() is called is make a request to the /decide endpoint on PostHog's backend. This endpoint contains information on how to run the PostHog library so events are properly received in the backend.\nThis endpoint is required to run most features of the library. However, if you're not using any of the described features, you may wish to turn off the call completely to avoid an extra request and reduce resource usage on both the client and the server.\nfalse",
                    "type": "boolean",
                    "name": "advanced_disable_decide"
                },
                {
                    "description": "Stops from firing feature flag requests on first page load. Only requests feature flags when user identity or properties are updated, or you manually request for flags to be loaded.\nfalse",
                    "type": "boolean",
                    "name": "advanced_disable_feature_flags_on_first_load"
                },
                {
                    "description": "Will keep /decide running, but without any feature flag requests\nfalse",
                    "type": "boolean",
                    "name": "advanced_disable_feature_flags"
                },
                {
                    "description": "Determines whether PostHog should disable toolbar metrics. This is our internal instrumentation for our toolbar in your website.\nfalse",
                    "type": "boolean",
                    "name": "advanced_disable_toolbar_metrics"
                },
                {
                    "description": "URL of your PostHog instance.\n'https://us.i.posthog.com'",
                    "type": "string",
                    "name": "api_host"
                },
                {
                    "description": "",
                    "type": "string",
                    "name": "api_method"
                },
                {
                    "description": "The transport method to use for API requests.\n'fetch'",
                    "type": "'XHR' | 'fetch'",
                    "name": "api_transport"
                },
                {
                    "description": "Determines whether PostHog should autocapture events. This setting does not affect capturing pageview events (see `capture_pageview`).\ntrue",
                    "type": "boolean | AutocaptureConfig",
                    "name": "autocapture"
                },
                {
                    "description": "This function or array of functions - if provided - are called immediately before sending data to the server. It allows you to edit data before it is sent, or choose not to send it all. if provided as an array the functions are called in the order they are provided any one function returning null means the event will not be sent",
                    "type": "BeforeSendFn | BeforeSendFn[]",
                    "name": "before_send"
                },
                {
                    "description": "An object containing the `distinctID`, `isIdentifiedID`, and `featureFlags` keys, where `distinctID` is a string, and `featureFlags` is an object of key-value pairs.\nSince there is a delay between initializing PostHog and fetching feature flags, feature flags are not always available immediately. This makes them unusable if you want to do something like redirecting a user to a different page based on a feature flag.\nYou can, therefore, fetch the feature flags in your server and pre-fill them here, allowing PostHog to know the feature flag values immediately.\nAfter the SDK fetches feature flags from PostHog, it will use those flag values instead of bootstrapped ones.",
                    "type": "BootstrapConfig",
                    "name": "bootstrap"
                },
                {
                    "description": "Determines whether to capture dead clicks.",
                    "type": "boolean | DeadClicksAutoCaptureConfig",
                    "name": "capture_dead_clicks"
                },
                {
                    "description": "Determines whether to capture exceptions.",
                    "type": "boolean | ExceptionAutoCaptureConfig",
                    "name": "capture_exceptions"
                },
                {
                    "description": "Determines whether to capture heatmaps.",
                    "type": "boolean | HeatmapConfig",
                    "name": "capture_heatmaps"
                },
                {
                    "description": "Determines whether PostHog should capture pageleave events. If set to `true`, it will capture pageleave events for all pages. If set to `'if_capture_pageview'`, it will only capture pageleave events if `capture_pageview` is also set to `true` or `'history_change'`.\n'if_capture_pageview'",
                    "type": "boolean | 'if_capture_pageview'",
                    "name": "capture_pageleave"
                },
                {
                    "description": "Determines whether PostHog should capture pageview events automatically. Can be: - `true`: Capture regular pageviews (default) - `false`: Don't capture any pageviews - `'history_change'`: Only capture pageviews on history API changes (pushState, replaceState, popstate)\ntrue",
                    "type": "boolean | 'history_change'",
                    "name": "capture_pageview"
                },
                {
                    "description": "Determines whether to capture performance metrics. These include Network Timing and Web Vitals.\nWhen `undefined`, fallback to the remote configuration. If `false`, neither network timing nor web vitals will work. If an object, that will override the remote configuration.",
                    "type": "boolean | PerformanceCaptureConfig",
                    "name": "capture_performance"
                },
                {
                    "description": "Determines the number of days to store cookies for.\n365",
                    "type": "number",
                    "name": "cookie_expiration"
                },
                {
                    "description": "",
                    "type": "string",
                    "name": "cookie_name"
                },
                {
                    "description": "Determines if cookie should be set on the top level domain (example.com). If PostHog-js is loaded on a subdomain (test.example.com), and `cross_subdomain_cookie` is set to false, it'll set the cookie on the subdomain only (test.example.com).\nNOTE: It will be set to `false` if we detect that the domain is a subdomain of a platform that is excluded from cross-subdomain cookie setting. The current list of excluded platforms is `herokuapp.com`, `vercel.app`, and `netlify.app`.",
                    "type": "boolean",
                    "name": "cross_subdomain_cookie"
                },
                {
                    "description": "Used to extend the list of user agents that are blocked by default.",
                    "type": "string[]",
                    "name": "custom_blocked_useragents"
                },
                {
                    "description": "Used to extend the list of campaign parameters that are saved by default.",
                    "type": "string[]",
                    "name": "custom_campaign_params"
                },
                {
                    "description": "Custom list of personal data properties to mask.\n[]",
                    "type": "string[]",
                    "name": "custom_personal_data_properties"
                },
                {
                    "description": "Determines whether PostHog should be in debug mode. You can enable this to get more detailed logging.\nYou can also enable this on your website by appending `?__posthog_debug=true` at the end of your URL You can also call `posthog.debug()` in your code to enable debug mode\nfalse",
                    "type": "boolean",
                    "name": "debug"
                },
                {
                    "description": "Configuration defaults for breaking changes. When set to a specific date, enables new default behaviors that were introduced on that date.\n- `'unset'`: Use legacy default behaviors - `'2025-05-24'`: Use updated default behaviors (e.g. capture_pageview defaults to 'history_change')\n'unset'",
                    "type": "ConfigDefaults",
                    "name": "defaults"
                },
                {
                    "description": "Determines whether to disable compression when sending events to the server. WARNING: Should only be used for testing. Could negatively impact performance.\nfalse",
                    "type": "boolean",
                    "name": "disable_compression"
                },
                {
                    "description": "",
                    "type": "boolean",
                    "name": "disable_cookie"
                },
                {
                    "description": "Determines whether PostHog should disable any external dependency loading. This will prevent PostHog from requesting any external scripts such as those needed for Session Replay, Surveys or Site Apps.\nfalse",
                    "type": "boolean",
                    "name": "disable_external_dependency_loading"
                },
                {
                    "description": "Determines whether PostHog should disable persistence. If set to `true`, the library will not save any data to the browser. It will also delete any data previously saved to the browser.\nfalse",
                    "type": "boolean",
                    "name": "disable_persistence"
                },
                {
                    "description": "Determines whether to disable scroll properties. These allow you to keep track of how far down someone scrolled in your website.\nfalse",
                    "type": "boolean",
                    "name": "disable_scroll_properties"
                },
                {
                    "description": "Determines whether PostHog should disable session recording.\nfalse",
                    "type": "boolean",
                    "name": "disable_session_recording"
                },
                {
                    "description": "Determines whether PostHog should disable surveys.\nfalse",
                    "type": "boolean",
                    "name": "disable_surveys"
                },
                {
                    "description": "Determines whether PostHog should disable web experiments.\nCurrently disabled while we're in BETA. It will be toggled to `true` in a future release.\ntrue",
                    "type": "boolean",
                    "name": "disable_web_experiments"
                },
                {
                    "description": "No description available",
                    "type": "boolean",
                    "name": "enable_heatmaps"
                },
                {
                    "description": "Determines whether PostHog should enable recording console logs. When undefined, it falls back to the remote config setting.\nundefined",
                    "type": "boolean",
                    "name": "enable_recording_console_log"
                },
                {
                    "description": "Sets timeout for fetching feature flags\n3000",
                    "type": "number",
                    "name": "feature_flag_request_timeout_ms"
                },
                {
                    "description": "Used when sending data via `fetch`, use with care. This is intentionally meant to be used with NextJS `fetch`\nIncorrect `cache` usage may cause out-of-date data for feature flags, actions tracking, etc. See https://nextjs.org/docs/app/api-reference/functions/fetch#fetchurl-options",
                    "type": "{\n        cache?: RequestInit['cache'];\n        next_options?: NextOptions;\n    }",
                    "name": "fetch_options"
                },
                {
                    "description": "Function to get the device ID. This doesn't usually need to be set, but can be useful if you want to use a custom device ID.",
                    "type": "(uuid: string) => string",
                    "name": "get_device_id"
                },
                {
                    "description": "",
                    "type": "boolean",
                    "name": "inapp_link_new_window"
                },
                {
                    "description": "",
                    "type": "string",
                    "name": "inapp_protocol"
                },
                {
                    "description": "Determines whether PostHog should capture IP addresses.\ntrue",
                    "type": "boolean",
                    "name": "ip"
                },
                {
                    "description": "A function to be called once the PostHog scripts have loaded successfully.",
                    "type": "(posthog_instance: PostHog) => void",
                    "name": "loaded"
                },
                {
                    "description": "Prevent autocapture from capturing any attribute names on elements.\nfalse",
                    "type": "boolean",
                    "name": "mask_all_element_attributes"
                },
                {
                    "description": "Prevent autocapture from capturing `textContent` on elements.\nfalse",
                    "type": "boolean",
                    "name": "mask_all_text"
                },
                {
                    "description": "Prevent autocapture from capturing personal data properties. These include campaign parameters, UTM parameters, and other parameters that could be considered personal data under e.g. GDPR.\nfalse",
                    "type": "boolean",
                    "name": "mask_personal_data_properties"
                },
                {
                    "description": "The name this instance will be identified by. You don't need to set this most of the time, but can be useful if you have several Posthog instances running at the same time.\n'posthog'",
                    "type": "string",
                    "name": "name"
                },
                {
                    "description": "A function that is called when a request to the PostHog API fails.",
                    "type": "(error: RequestResponse) => void",
                    "name": "on_request_error"
                },
                {
                    "description": "",
                    "type": "(failedRequest: XMLHttpRequest) => void",
                    "name": "on_xhr_error"
                },
                {
                    "description": "Determines if users should be opted in to site apps.\nfalse",
                    "type": "boolean",
                    "name": "opt_in_site_apps"
                },
                {
                    "description": "Determines if users should be opted out of PostHog tracking by default, requiring additional logic to opt them into capturing by calling `posthog.opt_in_capturing()`.\nfalse",
                    "type": "boolean",
                    "name": "opt_out_capturing_by_default"
                },
                {
                    "description": "Determines the prefix for the cookie used to store the information about whether users are opted out of capturing. When `null`, it falls back to the default prefix found in `consent.ts`.\nnull",
                    "type": "string | null",
                    "name": "opt_out_capturing_cookie_prefix"
                },
                {
                    "description": "Determines where we'll save the information about whether users are opted out of capturing.\n'localStorage'",
                    "type": "'localStorage' | 'cookie'",
                    "name": "opt_out_capturing_persistence_type"
                },
                {
                    "description": "Determines if users should be opted out of browser data storage by this PostHog instance by default, requiring additional logic to opt them into capturing by calling `posthog.opt_in_capturing()`.\nfalse",
                    "type": "boolean",
                    "name": "opt_out_persistence_by_default"
                },
                {
                    "description": "Determines if users should be opted out of user agent filtering such as googlebot or other bots. If this is set to `true`, PostHog will set `$browser_type` to either `bot` or `browser` for all events, but will process all events as if they were from a browser.\nfalse",
                    "type": "boolean",
                    "name": "opt_out_useragent_filter"
                },
                {
                    "description": "The name for the super properties persistent store\n''",
                    "type": "string",
                    "name": "persistence_name"
                },
                {
                    "description": "Determines how PostHog stores information about the user. See [persistence](https://posthog.com/docs/libraries/js#persistence) for details.\n'localStorage+cookie'",
                    "type": "'localStorage' | 'cookie' | 'memory' | 'localStorage+cookie' | 'sessionStorage'",
                    "name": "persistence"
                },
                {
                    "description": "You can control whether events from PostHog-js have person processing enabled with the `person_profiles` config setting. There are three options: - `person_profiles: 'always'` - we will process persons data for all events - `person_profiles: 'never'` - we won't process persons for any event. This means that anonymous users will not be merged once they sign up or login, so you lose the ability to create funnels that track users from anonymous to identified. All events (including `$identify`) will be sent with `$process_person_profile: False`. - `person_profiles: 'identified_only'` _(default)_ - we will only process persons when you call `posthog.identify`, `posthog.alias`, `posthog.setPersonProperties`, `posthog.group`, `posthog.setPersonPropertiesForFlags` or `posthog.setGroupPropertiesForFlags` Anonymous users won't get person profiles.\n'identified_only'",
                    "type": "'always' | 'never' | 'identified_only'",
                    "name": "person_profiles"
                },
                {
                    "description": "A function to be called when a script is being loaded. This can be used to modify the script before it is loaded. This is useful for adding a nonce to the script, for example.",
                    "type": "(script: HTMLScriptElement) => HTMLScriptElement | null",
                    "name": "prepare_external_dependency_script"
                },
                {
                    "description": "A function to be called when a stylesheet is being loaded. This can be used to modify the stylesheet before it is loaded. This is useful for adding a nonce to the stylesheet, for example.",
                    "type": "(stylesheet: HTMLStyleElement) => HTMLStyleElement | null",
                    "name": "prepare_external_dependency_stylesheet"
                },
                {
                    "description": "",
                    "type": "'always' | 'never' | 'identified_only'",
                    "name": "process_person"
                },
                {
                    "description": "Determines the maximum length of the properties string that can be sent with capture calls.\n65535",
                    "type": "number",
                    "name": "properties_string_max_length"
                },
                {
                    "description": "",
                    "type": "string[]",
                    "name": "property_blacklist"
                },
                {
                    "description": "A list of properties that should never be sent with capture calls.\n[]",
                    "type": "string[]",
                    "name": "property_denylist"
                },
                {
                    "description": "Determines whether PostHog should capture rage clicks.\ntrue",
                    "type": "boolean",
                    "name": "rageclick"
                },
                {
                    "description": "Client side rate limiting",
                    "type": "{\n        events_per_second?: number;\n        events_burst_limit?: number;\n    }",
                    "name": "rate_limiting"
                },
                {
                    "description": "Determines whether PostHog should batch requests to the PostHog API.\ntrue",
                    "type": "boolean",
                    "name": "request_batching"
                },
                {
                    "description": "A list of headers that should be sent with requests to the PostHog API.",
                    "type": "{\n        [header_name: string]: string;\n    }",
                    "name": "request_headers"
                },
                {
                    "description": "Used to change the behavior of the request queue. This is an advanced feature and should be used with caution.",
                    "type": "RequestQueueConfig",
                    "name": "request_queue_config"
                },
                {
                    "description": "Determines whether PostHog should respect the Do Not Track header when computing consent in `ConsentManager`.",
                    "type": "boolean",
                    "name": "respect_dnt"
                },
                {
                    "description": "",
                    "type": "((properties: Properties, event_name: string) => Properties) | null",
                    "name": "sanitize_properties"
                },
                {
                    "description": "Determines whether PostHog should save marketing parameters. These are `utm_*` paramaters and friends.",
                    "type": "boolean",
                    "name": "save_campaign_params"
                },
                {
                    "description": "Determines whether PostHog should save referrer information.\ntrue",
                    "type": "boolean",
                    "name": "save_referrer"
                },
                {
                    "description": "Let the pageview scroll stats use a custom css selector for the root element, e.g. `main` It will use `window.document.documentElement` if not specified.",
                    "type": "string | string[]",
                    "name": "scroll_root_selector"
                },
                {
                    "description": "Determines whether PostHog should use secure cookies. If this is `true`, PostHog cookies will be marked as secure, meaning they will only be transmitted over HTTPS.\nwindow.location.protocol === 'https:'",
                    "type": "boolean",
                    "name": "secure_cookie"
                },
                {
                    "description": "The segment analytics object.",
                    "type": "SegmentAnalytics",
                    "name": "segment"
                },
                {
                    "description": "Determines the session idle timeout in seconds. Any new event that's happened after this timeout will create a new session.\n30 * 60 -- 30 minutes",
                    "type": "number",
                    "name": "session_idle_timeout_seconds"
                },
                {
                    "description": "Determines the session recording options.",
                    "type": "SessionRecordingOptions",
                    "name": "session_recording"
                },
                {
                    "description": "",
                    "type": "boolean",
                    "name": "store_google"
                },
                {
                    "description": "Sets timeout for fetching surveys\n10000",
                    "type": "number",
                    "name": "surveys_request_timeout_ms"
                },
                {
                    "description": "The token for your PostHog project. It should NOT be provided manually in the config, but rather passed as the first parameter to `posthog.init()`.",
                    "type": "string",
                    "name": "token"
                },
                {
                    "description": "If using a reverse proxy for `api_host` then this should be the actual PostHog app URL (e.g. https://us.posthog.com). This ensures that links to PostHog point to the correct host.\nnull",
                    "type": "string | null",
                    "name": "ui_host"
                },
                {
                    "description": "Determines whether PostHog should upgrade old cookies. If set to `true`, the library will check for a cookie from our old js library and import super properties from it, then the old cookie is deleted. This option only works in the initialization, so make sure you set it when you create the library.\nfalse",
                    "type": "boolean",
                    "name": "upgrade"
                },
                {
                    "description": "",
                    "type": "boolean",
                    "name": "verbose"
                },
                {
                    "description": "",
                    "type": "{\n        [header_name: string]: string;\n    }",
                    "name": "xhr_headers"
                }
            ],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "Properties",
            "name": "Properties",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "Property",
            "name": "Property",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "PropertyMatchType",
            "name": "PropertyMatchType",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "QueuedRequestWithOptions",
            "name": "QueuedRequestWithOptions",
            "properties": [
                {
                    "description": "key of queue, e.g. 'sessionRecording' vs 'event'",
                    "type": "string",
                    "name": "batchKey"
                }
            ],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "RatingSurveyQuestion",
            "name": "RatingSurveyQuestion",
            "properties": [
                {
                    "description": "No description available",
                    "type": "'number' | 'emoji'",
                    "name": "display"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "lowerBoundLabel"
                },
                {
                    "description": "No description available",
                    "type": "3 | 5 | 7 | 10",
                    "name": "scale"
                },
                {
                    "description": "No description available",
                    "type": "boolean",
                    "name": "skipSubmitButton"
                },
                {
                    "description": "No description available",
                    "type": "SurveyQuestionType.Rating",
                    "name": "type"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "upperBoundLabel"
                }
            ],
            "path": "lib/src/posthog-surveys-types.d.ts"
        },
        {
            "id": "RemoteConfig",
            "name": "RemoteConfig",
            "properties": [
                {
                    "description": "Whether we should use a custom endpoint for analytics\nendpoint: \"/e\"",
                    "type": "{\n        endpoint?: string;\n    }",
                    "name": "analytics"
                },
                {
                    "description": "If set, disables autocapture",
                    "type": "boolean",
                    "name": "autocapture_opt_out"
                },
                {
                    "description": "This is currently in development and may have breaking changes without a major version bump",
                    "type": "boolean | {\n        endpoint?: string;\n    }",
                    "name": "autocaptureExceptions"
                },
                {
                    "description": "Whether to capture dead clicks",
                    "type": "boolean",
                    "name": "captureDeadClicks"
                },
                {
                    "description": "originally capturePerformance was replay only and so boolean true is equivalent to  network_timing: true  now capture performance can be separately enabled within replay and as a standalone web vitals tracker people can have them enabled separately they work standalone but enhance each other TODO: deprecate this so we make a new config that doesn't need this explanation",
                    "type": "boolean | PerformanceCaptureConfig",
                    "name": "capturePerformance"
                },
                {
                    "description": "Whether to only capture identified users by default",
                    "type": "boolean",
                    "name": "defaultIdentifiedOnly"
                },
                {
                    "description": "",
                    "type": "ToolbarParams",
                    "name": "editorParams"
                },
                {
                    "description": "Whether the `$elements_chain` property should be sent as a string or as an array\nfalse",
                    "type": "boolean",
                    "name": "elementsChainAsString"
                },
                {
                    "description": "Error tracking configuration options",
                    "type": "{\n        autocaptureExceptions?: boolean;\n        suppressionRules?: ErrorTrackingSuppressionRule[];\n    }",
                    "name": "errorTracking"
                },
                {
                    "description": "Indicates if the team has any flags enabled (if not we don't need to load them)",
                    "type": "boolean",
                    "name": "hasFeatureFlags"
                },
                {
                    "description": "Whether heatmaps are enabled",
                    "type": "boolean",
                    "name": "heatmaps"
                },
                {
                    "description": "Whether the user is authenticated",
                    "type": "boolean",
                    "name": "isAuthenticated"
                },
                {
                    "description": "Session recording configuration options",
                    "type": "SessionRecordingCanvasOptions & {\n        endpoint?: string;\n        consoleLogRecordingEnabled?: boolean;\n        sampleRate?: string | null;\n        minimumDurationMilliseconds?: number;\n        linkedFlag?: string | FlagVariant | null;\n        networkPayloadCapture?: Pick<NetworkRecordOptions, 'recordBody' | 'recordHeaders'>;\n        masking?: Pick<SessionRecordingOptions, 'maskAllInputs' | 'maskTextSelector'>;\n        urlTriggers?: SessionRecordingUrlTrigger[];\n        scriptConfig?: {\n            script?: string | undefined;\n        };\n        urlBlocklist?: SessionRecordingUrlTrigger[];\n        eventTriggers?: string[];\n        triggerMatchType?: 'any' | 'all';\n    }",
                    "name": "sessionRecording"
                },
                {
                    "description": "List of site apps with their IDs and URLs",
                    "type": "{\n        id: string;\n        url: string;\n    }[]",
                    "name": "siteApps"
                },
                {
                    "description": "Supported compression algorithms",
                    "type": "Compression[]",
                    "name": "supportedCompression"
                },
                {
                    "description": "Whether surveys are enabled",
                    "type": "boolean | Survey[]",
                    "name": "surveys"
                },
                {
                    "description": "Parameters for the toolbar",
                    "type": "ToolbarParams",
                    "name": "toolbarParams"
                },
                {
                    "description": "deprecated, moved to toolbarParams",
                    "type": "'toolbar'",
                    "name": "toolbarVersion"
                }
            ],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "RemoteConfigFeatureFlagCallback",
            "name": "RemoteConfigFeatureFlagCallback",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "RequestCallback",
            "name": "RequestCallback",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "RequestQueueConfig",
            "name": "RequestQueueConfig",
            "properties": [
                {
                    "description": "ADVANCED - alters the frequency which PostHog sends events to the server. generally speaking this is only set when apps have automatic page refreshes, or very short visits. Defaults to 3 seconds when not set Allowed values between 250 and 5000",
                    "type": "number",
                    "name": "flush_interval_ms"
                }
            ],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "RequestResponse",
            "name": "RequestResponse",
            "properties": [
                {
                    "description": "No description available",
                    "type": "any",
                    "name": "json"
                },
                {
                    "description": "No description available",
                    "type": "number",
                    "name": "statusCode"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "text"
                }
            ],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "RequestWithOptions",
            "name": "RequestWithOptions",
            "properties": [
                {
                    "description": "No description available",
                    "type": "RequestCallback",
                    "name": "callback"
                },
                {
                    "description": "No description available",
                    "type": "Compression | 'best-available'",
                    "name": "compression"
                },
                {
                    "description": "No description available",
                    "type": "Record<string, any> | Record<string, any>[]",
                    "name": "data"
                },
                {
                    "description": "No description available",
                    "type": "{\n        cache?: RequestInit['cache'];\n        next?: NextOptions;\n    }",
                    "name": "fetchOptions"
                },
                {
                    "description": "No description available",
                    "type": "Record<string, any>",
                    "name": "headers"
                },
                {
                    "description": "No description available",
                    "type": "'POST' | 'GET'",
                    "name": "method"
                },
                {
                    "description": "No description available",
                    "type": "boolean",
                    "name": "noRetries"
                },
                {
                    "description": "No description available",
                    "type": "number",
                    "name": "timeout"
                },
                {
                    "description": "No description available",
                    "type": "'XHR' | 'fetch' | 'sendBeacon'",
                    "name": "transport"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "url"
                },
                {
                    "description": "No description available",
                    "type": "{\n        compression: Compression;\n    }",
                    "name": "urlQueryArgs"
                }
            ],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "RetriableRequestWithOptions",
            "name": "RetriableRequestWithOptions",
            "properties": [
                {
                    "description": "No description available",
                    "type": "number",
                    "name": "retriesPerformedSoFar"
                }
            ],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "SessionIdChangedCallback",
            "name": "SessionIdChangedCallback",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "SessionRecordingCanvasOptions",
            "name": "SessionRecordingCanvasOptions",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "SessionRecordingOptions",
            "name": "SessionRecordingOptions",
            "properties": [
                {
                    "description": "ADVANCED: alters the bucket size for the token bucket mutation throttling Normally only altered alongside posthog support guidance. Accepts values between 0 and 100\n100",
                    "type": "number",
                    "name": "__mutationRateLimiterBucketSize"
                },
                {
                    "description": "ADVANCED: alters the refill rate for the token bucket mutation throttling Normally only altered alongside posthog support guidance. Accepts values between 0 and 100\n10",
                    "type": "number",
                    "name": "__mutationRateLimiterRefillRate"
                },
                {
                    "description": "Derived from `rrweb.record` options",
                    "type": "string | RegExp",
                    "name": "blockClass"
                },
                {
                    "description": "Derived from `rrweb.record` options",
                    "type": "string | null",
                    "name": "blockSelector"
                },
                {
                    "description": "Allows local config to override remote canvas recording settings from the decide response",
                    "type": "SessionRecordingCanvasOptions",
                    "name": "captureCanvas"
                },
                {
                    "description": "Derived from `rrweb.record` options",
                    "type": "boolean",
                    "name": "collectFonts"
                },
                {
                    "description": "ADVANCED: whether to partially compress rrweb events before sending them to the server, defaults to true, can be set to false to disable partial compression NB requests are still compressed when sent to the server regardless of this setting\ntrue",
                    "type": "boolean",
                    "name": "compress_events"
                },
                {
                    "description": "ADVANCED: while a user is active we take a full snapshot of the browser every interval. For very few sites playback performance might be better with different interval. Set to 0 to disable\n1000 * 60 * 5 (5 minutes)",
                    "type": "number",
                    "name": "full_snapshot_interval_millis"
                },
                {
                    "description": "Derived from `rrweb.record` options",
                    "type": "string | RegExp",
                    "name": "ignoreClass"
                },
                {
                    "description": "Derived from `rrweb.record` options",
                    "type": "boolean",
                    "name": "inlineStylesheet"
                },
                {
                    "description": "Derived from `rrweb.record` options",
                    "type": "boolean",
                    "name": "maskAllInputs"
                },
                {
                    "description": "Modify the network request before it is captured. Returning null or undefined stops it being captured",
                    "type": "((data: CapturedNetworkRequest) => CapturedNetworkRequest | null | undefined) | null",
                    "name": "maskCapturedNetworkRequestFn"
                },
                {
                    "description": "Derived from `rrweb.record` options",
                    "type": "((text: string, element?: HTMLElement) => string) | null",
                    "name": "maskInputFn"
                },
                {
                    "description": "Derived from `rrweb.record` options",
                    "type": "recordOptions['maskInputOptions']",
                    "name": "maskInputOptions"
                },
                {
                    "description": "",
                    "type": "((data: NetworkRequest) => NetworkRequest | null | undefined) | null",
                    "name": "maskNetworkRequestFn"
                },
                {
                    "description": "Derived from `rrweb.record` options",
                    "type": "string | RegExp",
                    "name": "maskTextClass"
                },
                {
                    "description": "Derived from `rrweb.record` options",
                    "type": "((text: string, element?: HTMLElement) => string) | null",
                    "name": "maskTextFn"
                },
                {
                    "description": "Derived from `rrweb.record` options",
                    "type": "string | null",
                    "name": "maskTextSelector"
                },
                {
                    "description": "Derived from `rrweb.record` options",
                    "type": "boolean",
                    "name": "recordBody"
                },
                {
                    "description": "Derived from `rrweb.record` options",
                    "type": "boolean",
                    "name": "recordCrossOriginIframes"
                },
                {
                    "description": "Derived from `rrweb.record` options",
                    "type": "boolean",
                    "name": "recordHeaders"
                },
                {
                    "description": "ADVANCED: alters the threshold before a recording considers a user has become idle. Normally only altered alongside changes to session_idle_timeout_ms.\n1000 * 60 * 5 (5 minutes)",
                    "type": "number",
                    "name": "session_idle_threshold_ms"
                },
                {
                    "description": "Derived from `rrweb.record` options",
                    "type": "recordOptions['slimDOMOptions']",
                    "name": "slimDOMOptions"
                }
            ],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "SessionRecordingUrlTrigger",
            "name": "SessionRecordingUrlTrigger",
            "properties": [
                {
                    "description": "No description available",
                    "type": "'regex'",
                    "name": "matching"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "url"
                }
            ],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "SeverityLevel",
            "name": "SeverityLevel",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "SiteApp",
            "name": "SiteApp",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "SiteAppGlobals",
            "name": "SiteAppGlobals",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "SiteAppLoader",
            "name": "SiteAppLoader",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "SnippetArrayItem",
            "name": "SnippetArrayItem",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "SupportedWebVitalsMetrics",
            "name": "SupportedWebVitalsMetrics",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "Survey",
            "name": "Survey",
            "properties": [
                {
                    "description": "No description available",
                    "type": "SurveyAppearance | null",
                    "name": "appearance"
                },
                {
                    "description": "No description available",
                    "type": "{\n        url?: string;\n        selector?: string;\n        seenSurveyWaitPeriodInDays?: number;\n        urlMatchType?: PropertyMatchType;\n        events: {\n            repeatedActivation?: boolean;\n            values: {\n                name: string;\n            }[];\n        } | null;\n        actions: {\n            values: SurveyActionType[];\n        } | null;\n        deviceTypes?: string[];\n        deviceTypesMatchType?: PropertyMatchType;\n    } | null",
                    "name": "conditions"
                },
                {
                    "description": "No description available",
                    "type": "string | null",
                    "name": "current_iteration_start_date"
                },
                {
                    "description": "No description available",
                    "type": "number | null",
                    "name": "current_iteration"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "description"
                },
                {
                    "description": "No description available",
                    "type": "boolean | null",
                    "name": "enable_partial_responses"
                },
                {
                    "description": "No description available",
                    "type": "string | null",
                    "name": "end_date"
                },
                {
                    "description": "No description available",
                    "type": "{\n        key: string;\n        value?: string;\n    }[] | null",
                    "name": "feature_flag_keys"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "id"
                },
                {
                    "description": "No description available",
                    "type": "string | null",
                    "name": "internal_targeting_flag_key"
                },
                {
                    "description": "No description available",
                    "type": "string | null",
                    "name": "linked_flag_key"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "name"
                },
                {
                    "description": "No description available",
                    "type": "SurveyQuestion[]",
                    "name": "questions"
                },
                {
                    "description": "No description available",
                    "type": "SurveySchedule | null",
                    "name": "schedule"
                },
                {
                    "description": "No description available",
                    "type": "string | null",
                    "name": "start_date"
                },
                {
                    "description": "No description available",
                    "type": "string | null",
                    "name": "targeting_flag_key"
                },
                {
                    "description": "No description available",
                    "type": "SurveyType",
                    "name": "type"
                }
            ],
            "path": "lib/src/posthog-surveys-types.d.ts"
        },
        {
            "id": "SurveyActionType",
            "name": "SurveyActionType",
            "properties": [
                {
                    "description": "No description available",
                    "type": "number",
                    "name": "id"
                },
                {
                    "description": "No description available",
                    "type": "string | null",
                    "name": "name"
                },
                {
                    "description": "No description available",
                    "type": "ActionStepType[]",
                    "name": "steps"
                }
            ],
            "path": "lib/src/posthog-surveys-types.d.ts"
        },
        {
            "id": "SurveyAppearance",
            "name": "SurveyAppearance",
            "properties": [
                {
                    "description": "No description available",
                    "type": "boolean",
                    "name": "autoDisappear"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "backgroundColor"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "borderColor"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "boxPadding"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "descriptionTextColor"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "disabledButtonOpacity"
                },
                {
                    "description": "No description available",
                    "type": "boolean",
                    "name": "displayThankYouMessage"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "fontFamily"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "maxWidth"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "placeholder"
                },
                {
                    "description": "No description available",
                    "type": "SurveyPosition",
                    "name": "position"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "ratingButtonActiveColor"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "ratingButtonColor"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "ratingButtonHoverColor"
                },
                {
                    "description": "No description available",
                    "type": "boolean",
                    "name": "shuffleQuestions"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "submitButtonColor"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "submitButtonText"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "submitButtonTextColor"
                },
                {
                    "description": "No description available",
                    "type": "number",
                    "name": "surveyPopupDelaySeconds"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "textColor"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "thankYouMessageCloseButtonText"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "thankYouMessageDescription"
                },
                {
                    "description": "No description available",
                    "type": "SurveyQuestionDescriptionContentType",
                    "name": "thankYouMessageDescriptionContentType"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "thankYouMessageHeader"
                },
                {
                    "description": "No description available",
                    "type": "boolean",
                    "name": "whiteLabel"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "widgetColor"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "widgetLabel"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "widgetSelector"
                },
                {
                    "description": "No description available",
                    "type": "SurveyWidgetType",
                    "name": "widgetType"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "zIndex"
                }
            ],
            "path": "lib/src/posthog-surveys-types.d.ts"
        },
        {
            "id": "SurveyCallback",
            "name": "SurveyCallback",
            "properties": [],
            "path": "lib/src/posthog-surveys-types.d.ts"
        },
        {
            "id": "SurveyElement",
            "name": "SurveyElement",
            "properties": [
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "$el_text"
                },
                {
                    "description": "No description available",
                    "type": "string[]",
                    "name": "attr_class"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "attr_id"
                },
                {
                    "description": "No description available",
                    "type": "Record<string, any>",
                    "name": "attributes"
                },
                {
                    "description": "No description available",
                    "type": "number",
                    "name": "event_id"
                },
                {
                    "description": "No description available",
                    "type": "number",
                    "name": "group_id"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "href"
                },
                {
                    "description": "No description available",
                    "type": "number",
                    "name": "nth_child"
                },
                {
                    "description": "No description available",
                    "type": "number",
                    "name": "nth_of_type"
                },
                {
                    "description": "No description available",
                    "type": "number",
                    "name": "order"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "tag_name"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "text"
                }
            ],
            "path": "lib/src/posthog-surveys-types.d.ts"
        },
        {
            "id": "SurveyQuestion",
            "name": "SurveyQuestion",
            "properties": [],
            "path": "lib/src/posthog-surveys-types.d.ts"
        },
        {
            "id": "SurveyQuestionDescriptionContentType",
            "name": "SurveyQuestionDescriptionContentType",
            "properties": [],
            "path": "lib/src/posthog-surveys-types.d.ts"
        },
        {
            "id": "SurveyRenderReason",
            "name": "SurveyRenderReason",
            "properties": [
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "disabledReason"
                },
                {
                    "description": "No description available",
                    "type": "boolean",
                    "name": "visible"
                }
            ],
            "path": "lib/src/posthog-surveys-types.d.ts"
        },
        {
            "id": "SurveyWithTypeAndAppearance",
            "name": "SurveyWithTypeAndAppearance",
            "properties": [],
            "path": "lib/src/posthog-surveys-types.d.ts"
        },
        {
            "id": "ToolbarParams",
            "name": "ToolbarParams",
            "properties": [
                {
                    "description": "No description available",
                    "type": "number",
                    "name": "actionId"
                },
                {
                    "description": "No description available",
                    "type": "string[]",
                    "name": "dataAttributes"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "distinctId"
                },
                {
                    "description": "No description available",
                    "type": "Record<string, string | boolean>",
                    "name": "featureFlags"
                },
                {
                    "description": "No description available",
                    "type": "boolean",
                    "name": "instrument"
                },
                {
                    "description": "No description available",
                    "type": "ToolbarSource",
                    "name": "source"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "temporaryToken"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "token"
                },
                {
                    "description": "No description available",
                    "type": "ToolbarVersion",
                    "name": "toolbarVersion"
                },
                {
                    "description": "No description available",
                    "type": "string",
                    "name": "userEmail"
                },
                {
                    "description": "No description available",
                    "type": "ToolbarUserIntent",
                    "name": "userIntent"
                }
            ],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "ToolbarSource",
            "name": "ToolbarSource",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "ToolbarUserIntent",
            "name": "ToolbarUserIntent",
            "properties": [],
            "path": "lib/src/types.d.ts"
        },
        {
            "id": "ToolbarVersion",
            "name": "ToolbarVersion",
            "properties": [],
            "path": "lib/src/types.d.ts"
        }
    ]
}
